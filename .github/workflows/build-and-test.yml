name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Set up work dir
      run: |
        echo "working directory is" $GITHUB_WORKSPACE
        cd $GITHUB_WORKSPACE

    - name: Set GOPATH
      run: |
        echo ::set-env name=GOPATH::$(echo $GITHUB_WORKSPACE)
        echo ::set-env name=WORKSPACE::$(echo $GITHUB_WORKSPACE)
        cd $GITHUB_WORKSPACE
    
    - name: Go get packages
      run: go get -t go.mongodb.org/mongo-driver/...

    - name: Build
      run: |
        cd $GITHUB_WORKSPACE/src/pkg/main
        go build -v -o $GOPATH/src/bin/server.exe

    - name: Test
      run: 
        go test $GITHUB_WORKSPACE/src/pkg/main/database_test.go
      
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: server.exe
        path: ${{ env.WORKSPACE }}/src/bin
        
    - name: Build and push Docker images
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKERHUB_LOGIN }}
        password: ${{ secrets.DOCKERHUB_PASS }}
        repository: ${{ secrets.DOCKERHUB_LOGIN }}/fancy-repo
        tags: fancy
        path: ${{ env.WORKSPACE }}/
        dockerfile: ./DOCKERFILE
        push: true
        
    - name: Azure Login
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDS }}
    
    - name: Deploy to Azure Container Instances
      uses: Azure/aci-deploy@v1
      with:
        resource-group: fancy-group
        command-line: ./app
        # Specify the fully qualified container image name. For example, "myregistry.azurecr.io/nginx:latest" or "python:3.7.2-alpine/"
        image: ${{ secrets.DOCKERHUB_LOGIN }}/fancy-repo:fancy
        ip-address: Public
        location: 'north eu'
        name: fancy-container-auto
        os-type: Linux
        ports: 80
        protocol: TCP
        dns-name-label: fancy-service
        # The container image registry login server
        #registry-login-server: # optional, default is 
        # Username to log in Container Image Registry Server
        #registry-username: # optional, default is 
        # Password to log in Container Image Registry Server
        #registry-password: # optional, default is 
        # Restart Policy for the container(s). Accepted Values are { Always, OnFailure, Never }
        restart-policy: Always
